# -*- coding: utf-8 -*-
"""HackGT22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nfuMjJdlsbc17TlAZXgp-p6GswlG_p0g
"""

import pandas as pd
import numpy as np
import calendar
import io

from gym import Env
from gym.spaces import Box, Discrete

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import Adam

from rl.agents import DQNAgent
from rl.policy import BoltzmannQPolicy
from rl.memory import SequentialMemory


data = pd.read_csv(io.BytesIO(uploaded['data.csv']))

print(data)

uniqLocs = data.drop_duplicates(subset = ["Building"])
print(uniqLocs)

print(type(uniqLocs.loc[:,"Building"][0]))
print(uniqLocs.loc[:,"Building"][0])
a = uniqLocs.loc[:,"Building"][0]
print(a.rpartition(' '))

data.Building.str.split(' ').str[0].unique()

data['unique_building'] = data.Building.str.split(' ').str[0]
data.sample(7)

data.dtypes

# gold is 2431
# red is 24531
# blue is 13542
# green is 2456

locationToRegion = {'Scheller' : 1, 'Guggenheim' : 2, 'Instructional': 4, 'Skiles' : 2, 'Weber' : 2,
       'College' : 3, 'Boggs' : 4, 'Engineering' : 2, 'Van' : 3, 'Klaus' : 3, 'Clough' : 2,
       'Mason' : 3, 'Allen' : 3, 'Manufacture' : 3, "O'Keefe" : 1, 'Howey' : 3, 'Paper' : 5,
       'D.M.' : 2, 'Curran' : 5, 'Ford' : 3, 'Cherry' : 3, 'East' : 3, 'Molecular' : 3, 'West' :  3, "Willage" : 5,
       'Kendeda': 5, '575' : 6, 'Whitaker' : 3, 'Bunger-Henry': 3, 'Swann' : 2, 'Habersham':4,
       'Daniel': 2, 'Old' : 2, 'Pettit': 3, 'Stephen':2, 'Brittain':2, 'Groseclose':4,
       'ISyE':4, 'Couch':5, 'J.':2}

data['region'] = data['unique_building'].map(locationToRegion)
print(data)

data['region'].value_counts().sort_index()

data.groupby('region')['Size'].agg('sum')

def f_group(x):
    d = {}
    d['Monday'] = x[x['mon']==True]['Size'].sum()
    d['Tuesday'] = x[x['tues']==True]['Size'].sum()
    d['Wednesday'] = x[x['wed']==True]['Size'].sum()
    d['Thursday'] = x[x['thur']==True]['Size'].sum()
    d['Friday'] = x[x['fri']==True]['Size'].sum()
    s = pd.Series(d)
    return s

data.groupby(['region']).apply(f_group).reset_index()

sorted(data.start.unique())

dayOfWeek = 1

df_group = data.groupby(['region', 'start']).apply(f_group).reset_index()
df_group = df_group.drop(42)

for i in range (5):
  if(i != 0):
    temp = {'region': i+1, 'start': 6, 'Monday': 0, 'Tuesday':0, 'Wednesday':0, 'Thursday':0, 'Friday':0}
    df_group = df_group.append(temp, ignore_index = True)
  if(i != 2):
    temp2 = {'region': i+1, 'start': 20, 'Monday': 0, 'Tuesday':0, 'Wednesday':0, 'Thursday':0, 'Friday':0}
    df_group = df_group.append(temp2, ignore_index = True)

df_group = df_group.sort_values(by=['start', 'region'])
df_group


def numberOfStops(start, stop, bus):
    counter = 0
    if not (start in bus and stop in bus):
        return 0
    if start == stop:
        return 0
    counter = 0
    for i in range(bus.index(start), len(bus)):
        if not bus[i] == stop:
            counter += 1
        else:
            return abs(5-counter)


goldbus = [2, 4, 3, 1]
redbus = [2, 4, 5, 3, 1]
bluebus = [1, 3, 5, 4, 2]
greenbus = [2, 4, 5, 6]

gold = []
red = []
blue = []
green = []

for i in range(5):
    gold.append([])
    red.append([])
    blue.append([])
    green.append([])
    for j in range(5):
        gold[i].append(numberOfStops(i+1, j+1, goldbus*2))
        red[i].append(numberOfStops(i+1, j+1, redbus*2))
        blue[i].append(numberOfStops(i+1, j+1, bluebus*2))
        green[i].append(numberOfStops(i+1, j+1, greenbus*2))

gold = np.array(gold)
red = np.array(red)
blue = np.array(blue)
green = np.array(green)


class CustomEnv(Env):

  def __init__(self):
    self.action_space = Discrete(7)
    self.observation_space = Box(low=0, high=12, shape=(4,))
    self.state = [3, 3, 1, 2] #initial number of red buses, blue buses, green buses, gold buses
    self.trials = 25

  def step(self, action):
    if(action == 0):
      self.state[0] += 0
    elif(action == 1):
      self.state[0] += 1
    elif(action == 2):
      self.state[1] += 1
    elif(action == 3):
      self.state[2] += 1
    elif(action == 4):
      self.state[2] -= 1
    elif(action == 5):
      self.state[3] += 1
    elif(action == 6):
      self.state[3] -= 1

    for i in range(len(self.state)):
      self.state[i] = max(0, self.state[i])

    self.trials -= 1

    curr_reward = 0
    temp_reward = 0
    for k in range(8):
      flows = [[0 for i in range(5)] for j in range(5)]
      for i in range (5):
        ourDelta = df_group.iloc[(5*(k+1)+i), dayOfWeek+1] - df_group.iloc[(5*k+i), dayOfWeek+1]
        currSum = sum(df_group.iloc[5*(k+1):5*(k+2), dayOfWeek+1]) - df_group.iloc[(5*(k+1)+i), dayOfWeek+1]
        for j in range (5):
          if(i == j):
            flows[i][j] = 0
          else:
            flows[i][j] = abs((ourDelta / currSum) * df_group.iloc[5*(k+1)+j, dayOfWeek+1])
      
      flows = np.array(flows)
      temp_matrix = np.add(np.add(self.state[0]*np.matmul(red, flows), self.state[1]*np.matmul(blue, flows)),  self.state[2]*np.add(np.matmul(green, flows), self.state[3]*np.matmul(gold, flows)))
      curr_reward = np.sum(temp_matrix)
      
      temp_reward += curr_reward
      curr_reward = 0

      reward = temp_reward * (-0.75 * (np.sum(self.state)-7.5) ** 2 + 2.5)

    if self.trials <= 0: 
        done = True
    else:
        done = False

    info = {}
    
    return self.state, reward, done, info

  def reset(self):
    self.state = [3, 3, 1, 2]
    self.trials = 25
    return self.state

env = CustomEnv()

dayOfWeek = 1
episodes = 25
for episode in range(1, episodes+1):
    state = env.reset()
    done = False
    score = 0 
    
    while not done:
        action = env.action_space.sample()
        n_state, reward, done, info = env.step(action)
        score+=reward
    print('Episode:{}.  Score:{}.  State:{}.'.format(episode, score, state))


states = env.observation_space.shape
actions = env.action_space.n

def build_model(states, actions):
  model = Sequential()    
  model.add(Dense(4, activation='relu', input_shape=(1,4)))
  model.add(Dense(16, activation='relu'))
  model.add(Dense(64, activation='relu'))
  model.add(Flatten())
  model.add(Dense(actions, activation='linear'))
  return model

model = build_model(states, actions)
model.summary()

def build_agent(model, actions):
  policy = BoltzmannQPolicy()
  memory = SequentialMemory(limit=50000, window_length=1)
  dqn = DQNAgent(model=model, memory=memory, policy=policy, 
                nb_actions=actions, nb_steps_warmup=10, target_model_update=1e-2)
  return dqn

dayOfWeek = 1
for i in range (5):
  dqn = build_agent(model, actions)
  dqn.compile(Adam(lr=1e-3), metrics=['mae'])
  dqn.fit(env, nb_steps=2048, visualize=False, verbose=1)
  print(dayOfWeek, dqn.recent_observation)
  path = 'saved_model/' + calendar.day_name[dayOfWeek-1]
  model.save(path)
  dayOfWeek += 1

!zip -r /content/saved_model.zip /content/saved_model
files.download('/content/saved_model.zip')